#----------------------------------------------
# 加载依赖
#----------------------------------------------
import sublime
import sublime_plugin
import os
import codecs
import re



#----------------------------------------------
# 定义项目列表
#----------------------------------------------
projects = []



#----------------------------------------------
# 定义插件加载完成事件
#----------------------------------------------
def plugin_loaded():

    # 获取【Session】文件路径
    fdir = sublime.packages_path()
    fpath = os.path.join(os.path.dirname(fdir), 'Local', 'Session.sublime_session')

    # 获取【Session】数据
    data = load_json_data(fpath)

    if data and 'workspaces' in data:
        data = data['workspaces']
    else:
        return

    # 获取最近项目数据
    if 'recent_workspaces' in data:
        data = data['recent_workspaces']

        print(data)

        # 格式化数据
        for x in data:
            projects.append(format_project(x))


    # 打印项目列表
    print(projects)



#----------------------------------------------
# 加载【Json】文件数据
#----------------------------------------------
def load_json_data(fpath, encoding = 'utf-8'):

    if os.path.exists(fpath):

        # 读取文件内容
        f = codecs.open(fpath, 'r', encoding)
        content = f.read()

        # 获取内容数据
        try:
            data = sublime.decode_value(content)
        except:
            raise

        # 关闭文件
        f.close()

    return data or null



#----------------------------------------------
# 格式化项目数据
#----------------------------------------------
def format_project(data):

    # 获取项目文件名
    name = re.sub('\.[\w\-]+?$', '', os.path.basename(data))

    # 替换项目文件路径
    # path = re.sub('\.sublime-workspace$', '.sublime-project', data)
    path = data

    # 获取用户文件夹目录
    upath = os.path.expanduser('~')

    # 返回项目信息
    return { 'desc': [name, path.replace(upath, '~')], 'path': path }



#----------------------------------------------
# 添加项目
#----------------------------------------------
def add_project(fpath):

    try:
        # 查找是否存在当前项目
        idx = [x['path'] for x in projects].index(fpath);

        # 调整项目排序
        idx != 0 and projects.insert(0, projects.pop(idx))

    except:

        # 添加项目
        projects.insert(0, format_project(fpath))





#----------------------------------------------
# 定义切换项目命令
#----------------------------------------------
class SwitchWorkspaceCommand(sublime_plugin.WindowCommand):

    # 当前项目
    current_project = None


    # 执行切换项目命令
    def run(self):

        # 此脚本只对【OSX】有效
        if sublime.platform() != 'osx':
            return None

        # 当存在项目时执行
        if len(projects):

            # 保存当前项目
            self.current_project = self.window.project_file_name()

            # 显示项目选择列表
            self.window.show_quick_panel(
                items = [ x['desc'] for x in projects ],
                on_select = lambda idx: self.on_select_project(idx, projects[idx])
            )


    # 选择项目回调函数
    def on_select_project(self, index, project):

        # 未选择项目时直接退出
        if index == -1:
            return None

        # 获取项目文件路径
        fpath = project['path']

        # 选择的不是当前项目时执行
        if fpath != self.current_project:

            # self.window.run_command('subl', { 'args': ['--project', fpath] })
            # sublime.set_timeout(lambda: self.window.run_command("close_window"), 10)

            self.window.run_command('close_window')
            self.window.run_command('open_recent_project_or_workspace', { 'index': index })

            projects.insert(0, projects.pop(index))



#----------------------------------------------
# 定义项目列表更新监听
#----------------------------------------------
class SwitchWorkspaceListener(sublime_plugin.EventListener):

    # 添加执行命令后监听
    def on_post_window_command(self, window, command_name, args):

        # 执行保存项目命令后
        if command_name == 'save_project_and_workspace_as':
            return add_project(sublime.active_window().project_file_name());

        # 执行打开项目命令后
        if command_name == 'prompt_open_project_or_workspace':
            return add_project(sublime.active_window().project_file_name());

        # 执行切换项目命令后
        if command_name == 'prompt_switch_project_or_workspace':
            return add_project(sublime.active_window().project_file_name());

        # print(command_name)

