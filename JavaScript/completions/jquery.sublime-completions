{
    "scope": "source.js",

    "completions": [
        { "trigger": "jQuery", "contents": "jQuery($0)" },

        { "trigger": "add\tjQuery", "contents": "add($0)" },
        { "trigger": "addClass\tjQuery", "contents": "addClass($0)" },
        { "trigger": "after\tjQuery", "contents": "after($0)" },
        { "trigger": "ajaxComplete\tjQuery", "contents": "ajaxComplete($0)" },
        { "trigger": "ajaxError\tjQuery", "contents": "ajaxError($0)" },
        { "trigger": "ajaxSend\tjQuery", "contents": "ajaxSend($0)" },
        { "trigger": "ajaxStart\tjQuery", "contents": "ajaxStart($0)" },
        { "trigger": "ajaxStop\tjQuery", "contents": "ajaxStop($0)" },
        { "trigger": "ajaxSuccess\tjQuery", "contents": "ajaxSuccess($0)" },
        { "trigger": "andSelf\tjQuery", "contents": "andSelf()$0" },
        { "trigger": "animate\tjQuery", "contents": "animate($0)" },
        { "trigger": "append\tjQuery", "contents": "append($0)" },
        { "trigger": "appendTo\tjQuery", "contents": "appendTo($0)" },
        { "trigger": "attr\tjQuery", "contents": "attr($0)" },
        { "trigger": "before\tjQuery", "contents": "before($0)" },
        { "trigger": "bind\tjQuery", "contents": "bind($0)" },
        { "trigger": "blur\tjQuery", "contents": "blur($0)" },
        { "trigger": "change\tjQuery", "contents": "change($0)" },
        { "trigger": "children\tjQuery", "contents": "children($0)" },
        { "trigger": "clearQueue\tjQuery", "contents": "clearQueue($0)" },
        { "trigger": "click\tjQuery", "contents": "click($0)" },
        { "trigger": "clone\tjQuery", "contents": "clone($0)" },
        { "trigger": "closest\tjQuery", "contents": "closest($0)" },
        { "trigger": "contents\tjQuery", "contents": "contents()$0" },
        { "trigger": "css\tjQuery", "contents": "css($0)" },
        { "trigger": "data\tjQuery", "contents": "data($0)" },
        { "trigger": "dblclick\tjQuery", "contents": "dblclick($0)" },
        { "trigger": "delay\tjQuery", "contents": "delay($0)" },
        { "trigger": "delegate\tjQuery", "contents": "delegate($0)" },
        { "trigger": "dequeue\tjQuery", "contents": "dequeue($0)" },
        { "trigger": "die\tjQuery", "contents": "die($0)" },
        { "trigger": "each\tjQuery", "contents": "each(function (i, el) {\n\t$1\n})$0" },
        { "trigger": "empty\tjQuery", "contents": "empty()$0" },
        { "trigger": "end\tjQuery", "contents": "end()$0" },
        { "trigger": "eq\tjQuery", "contents": "eq($0)" },
        { "trigger": "error\tjQuery", "contents": "error($0)" },
        { "trigger": "fadeIn\tjQuery", "contents": "fadeIn($0)" },
        { "trigger": "fadeOut\tjQuery", "contents": "fadeOut($0)" },
        { "trigger": "fadeTo\tjQuery", "contents": "fadeTo($0)" },
        { "trigger": "fadeToggle\tjQuery", "contents": "fadeToggle($0)" },
        { "trigger": "filter\tjQuery", "contents": "filter($0)" },
        { "trigger": "find\tjQuery", "contents": "find($0)" },
        { "trigger": "first\tjQuery", "contents": "first()$0" },
        { "trigger": "focus\tjQuery", "contents": "focus($0)" },
        { "trigger": "focusin\tjQuery", "contents": "focusin($0)" },
        { "trigger": "focusout\tjQuery", "contents": "focusout($0)" },
        { "trigger": "get\tjQuery", "contents": "get($0)" },
        { "trigger": "has\tjQuery", "contents": "has($0)" },
        { "trigger": "hasClass\tjQuery", "contents": "hasClass($0)" },
        { "trigger": "height\tjQuery", "contents": "height($0)" },
        { "trigger": "hide\tjQuery", "contents": "hide($0)" },
        { "trigger": "hover\tjQuery", "contents": "hover($0)" },
        { "trigger": "html\tjQuery", "contents": "html($0)" },
        { "trigger": "index\tjQuery", "contents": "index($0)" },
        { "trigger": "innerHeight\tjQuery", "contents": "innerHeight()$0" },
        { "trigger": "innerWidth\tjQuery", "contents": "innerWidth()$0" },
        { "trigger": "insertAfter\tjQuery", "contents": "insertAfter($0)" },
        { "trigger": "insertBefore\tjQuery", "contents": "insertBefore($0)" },
        { "trigger": "is\tjQuery", "contents": "is($0)" },
        { "trigger": "keydown\tjQuery", "contents": "keydown()$0" },
        { "trigger": "keypress\tjQuery", "contents": "keypress()$0" },
        { "trigger": "keyup\tjQuery", "contents": "keyup($0)" },
        { "trigger": "last\tjQuery", "contents": "last()$0" },
        { "trigger": "live\tjQuery (depr.)", "contents": "live($0)" },
        { "trigger": "load\tjQuery", "contents": "load($0)" },
        { "trigger": "map\tjQuery", "contents": "map(function (i, el) {\n\t$1\n})$0" },
        { "trigger": "mousedown\tjQuery", "contents": "mousedown()$0" },
        { "trigger": "mouseenter\tjQuery", "contents": "mouseenter()$0" },
        { "trigger": "mouseleave\tjQuery", "contents": "mouseleave()$0" },
        { "trigger": "mousemove\tjQuery", "contents": "mousemove()$0" },
        { "trigger": "mouseout\tjQuery", "contents": "mouseout()$0" },
        { "trigger": "mouseover\tjQuery", "contents": "mouseover()$0" },
        { "trigger": "mouseup\tjQuery", "contents": "mouseup()$0" },
        { "trigger": "next\tjQuery", "contents": "next($0)" },
        { "trigger": "nextAll\tjQuery", "contents": "nextAll($0)" },
        { "trigger": "nextUntil\tjQuery", "contents": "nextUntil($0)" },
        { "trigger": "not\tjQuery", "contents": "not($0)" },
        { "trigger": "off\tjQuery", "contents": "off($0)" },
        { "trigger": "offset\tjQuery", "contents": "offset($0)" },
        { "trigger": "offsetParent\tjQuery", "contents": "offsetParent()$0" },
        { "trigger": "on\tjQuery", "contents": "on($0)" },
        { "trigger": "one\tjQuery", "contents": "one($0)" },
        { "trigger": "outerHeight\tjQuery", "contents": "outerHeight($0)" },
        { "trigger": "outerWidth\tjQuery", "contents": "outerWidth($0)" },
        { "trigger": "parent\tjQuery", "contents": "parent($0)" },
        { "trigger": "parents\tjQuery", "contents": "parents($0)" },
        { "trigger": "parentsUntil\tjQuery", "contents": "parentsUntil($0)" },
        { "trigger": "position\tjQuery", "contents": "position()$0" },
        { "trigger": "prepend\tjQuery", "contents": "prepend($0)" },
        { "trigger": "prependTo\tjQuery", "contents": "prependTo($0)" },
        { "trigger": "prev\tjQuery", "contents": "prev($0)" },
        { "trigger": "prevAll\tjQuery", "contents": "prevAll($0)" },
        { "trigger": "prevUntil\tjQuery", "contents": "prevUntil($0)" },
        { "trigger": "promise\tjQuery", "contents": "promise($0)" },
        { "trigger": "prop\tjQuery", "contents": "prop($0)" },
        { "trigger": "pushStack\tjQuery", "contents": "pushStack($0)" },
        { "trigger": "queue\tjQuery", "contents": "queue($0)" },
        { "trigger": "ready\tjQuery", "contents": "ready($0)" },
        { "trigger": "remove\tjQuery", "contents": "remove($0)" },
        { "trigger": "removeAttr\tjQuery", "contents": "removeAttr($0)" },
        { "trigger": "removeClass\tjQuery", "contents": "removeClass($0)" },
        { "trigger": "removeData\tjQuery", "contents": "removeData($0)" },
        { "trigger": "removeProp\tjQuery", "contents": "removeProp($0)" },
        { "trigger": "replaceAll\tjQuery", "contents": "replaceAll($0)" },
        { "trigger": "replaceWith\tjQuery", "contents": "replaceWith($0)" },
        { "trigger": "resize\tjQuery", "contents": "resize()$0" },
        { "trigger": "scroll\tjQuery", "contents": "scroll()$0" },
        { "trigger": "scrollLeft\tjQuery", "contents": "scrollLeft($0)" },
        { "trigger": "scrollTop\tjQuery", "contents": "scrollTop($0)" },
        { "trigger": "select\tjQuery", "contents": "select()$0" },
        { "trigger": "serialize\tjQuery", "contents": "serialize()$0" },
        { "trigger": "serializeArray\tjQuery", "contents": "serializeArray()$0" },
        { "trigger": "show\tjQuery", "contents": "show()$0" },
        { "trigger": "siblings\tjQuery", "contents": "siblings($0)" },
        { "trigger": "size\tjQuery", "contents": "size()$0" },
        { "trigger": "slideDown\tjQuery", "contents": "slideDown($0)" },
        { "trigger": "slideToggle\tjQuery", "contents": "slideToggle($0)" },
        { "trigger": "slideUp\tjQuery", "contents": "slideUp($0)" },
        { "trigger": "stop\tjQuery", "contents": "stop($0)" },
        { "trigger": "submit\tjQuery", "contents": "submit()$0" },
        { "trigger": "text\tjQuery", "contents": "text($0)" },
        { "trigger": "toArray\tjQuery", "contents": "toArray($0)" },
        { "trigger": "toggle\tjQuery", "contents": "toggle($0)" },
        { "trigger": "toggleClass\tjQuery", "contents": "toggleClass($0)" },
        { "trigger": "trigger\tjQuery", "contents": "trigger($0)" },
        { "trigger": "triggerHandler\tjQuery", "contents": "triggerHandler($0)" },
        { "trigger": "unbind\tjQuery", "contents": "unbind($0)" },
        { "trigger": "undelegate\tjQuery", "contents": "undelegate($0)" },
        { "trigger": "unload\tjQuery", "contents": "unload($0)" },
        { "trigger": "unwrap\tjQuery", "contents": "unwrap()$0" },
        { "trigger": "val\tjQuery", "contents": "val($0)" },
        { "trigger": "width\tjQuery", "contents": "width($0)" },
        { "trigger": "wrap\tjQuery", "contents": "wrap($0)" },
        { "trigger": "wrapAll\tjQuery", "contents": "wrapAll($0)" },
        { "trigger": "wrapInner\tjQuery", "contents": "wrapInner($0)" },

        { "trigger": "ajax\t$", "contents": "ajax($0)" },
        { "trigger": "ajaxPrefilter\t$", "contents": "ajaxPrefilter($0)" },
        { "trigger": "ajaxSetup\t$", "contents": "ajaxSetup($0)" },
        { "trigger": "boxModel\t$.deprecated ", "contents": "boxModel" },
        { "trigger": "browser\t$.deprecated ", "contents": "browser" },
        { "trigger": "Callbacks\t$", "contents": "Callbacks($0)" },
        { "trigger": "contains\t$", "contents": "contains($0)" },
        { "trigger": "cssHooks\t$", "contents": "cssHooks" },
        { "trigger": "data\t$", "contents": "data($0)" },
        { "trigger": "dequeue\t$", "contents": "dequeue($0)" },
        { "trigger": "each\t$", "contents": "each(${1:data}, ${2:callback(i, v)})$0" },
        { "trigger": "error\t$", "contents": "error($0)" },
        { "trigger": "extend\t$", "contents": "extend($0)" },
        { "trigger": "fx.interval\t$", "contents": "fx.interval" },
        { "trigger": "fx.off\t$", "contents": "fx.off" },
        { "trigger": "get\t$", "contents": "get(${1:url}, ${2:data}, ${3:callback})$0" },
        { "trigger": "getJSON\t$", "contents": "getJSON(${1:url}, ${2:data}, ${3:callback})$0" },
        { "trigger": "getScript\t$", "contents": "getScript(${1:url}, ${2:callback}})$0" },
        { "trigger": "globalEval\t$", "contents": "globalEval($0)" },
        { "trigger": "grep\t$", "contents": "grep(${1:array}, ${2:function(el, i)}${3:[, invert]})$0" },
        { "trigger": "hasData\t$", "contents": "hasData($0)" },
        { "trigger": "holdReady\t$", "contents": "holdReady($0)" },
        { "trigger": "inArray\t$", "contents": "inArray($0)" },
        { "trigger": "isEmptyObject\t$", "contents": "isEmptyObject($0)" },
        { "trigger": "isFunction\t$", "contents": "isFunction($0)" },
        { "trigger": "isNumeric\t$", "contents": "isNumeric($0)" },
        { "trigger": "isPlainObject\t$", "contents": "isPlainObject($0)" },
        { "trigger": "isWindow\t$", "contents": "isWindow($0)" },
        { "trigger": "isXMLDoc\t$", "contents": "isXMLDoc($0)" },
        { "trigger": "makeArray\t$", "contents": "makeArray($0)" },
        { "trigger": "map\t$", "contents": "map(${1:object}, ${2:callback})$0" },
        { "trigger": "merge\t$", "contents": "merge($0)" },
        { "trigger": "noConflict\t$", "contents": "noConflict($0)" },
        { "trigger": "noop\t$", "contents": "noop()$0" },
        { "trigger": "now\t$", "contents": "now()$0" },
        { "trigger": "param\t$", "contents": "param($0)" },
        { "trigger": "parseJSON\t$", "contents": "parseJSON($0)" },
        { "trigger": "parseXML\t$", "contents": "parseXML($0)" },
        { "trigger": "post\t$", "contents": "post(${1:url}, ${2:data}, ${3:callback})$0" },
        { "trigger": "proxy\t$", "contents": "proxy($0)" },
        { "trigger": "queue\t$", "contents": "queue($0)" },
        { "trigger": "removeData\t$", "contents": "removeData($0)" },
        { "trigger": "support\t$", "contents": "support" },
        { "trigger": "trim\t$", "contents": "trim($0)" },
        { "trigger": "type\t$", "contents": "type($0)" },
        { "trigger": "unique\t$", "contents": "unique($0)" },
        { "trigger": "when\t$", "contents": "when($0)" },

        { "trigger": "always\tdeferred", "contents": "always($0)" },
        { "trigger": "done\tdeferred", "contents": "done($0)" },
        { "trigger": "fail\tdeferred", "contents": "fail($0)" },
        { "trigger": "isRejected\tdeferred", "contents": "isRejected()$0" },
        { "trigger": "isResolved\tdeferred", "contents": "isResolved()$0" },
        { "trigger": "notify\tdeferred", "contents": "notify($0)" },
        { "trigger": "notifyWith\tdeferred", "contents": "notifyWith($0)" },
        { "trigger": "pipe\tdeferred", "contents": "pipe($0)" },
        { "trigger": "progress\tdeferred", "contents": "progress($0)" },
        { "trigger": "promise\tdeferred", "contents": "promise($0)" },
        { "trigger": "reject\tdeferred", "contents": "reject($0)" },
        { "trigger": "rejectWith\tdeferred", "contents": "rejectWith($0)" },
        { "trigger": "resolve\tdeferred", "contents": "resolve($0)" },
        { "trigger": "resolveWith\tdeferred", "contents": "resolveWith($0)" },
        { "trigger": "state\tdeferred", "contents": "state()$0" },
        { "trigger": "then\tdeferred", "contents": "then($0)" }
    ]
}
